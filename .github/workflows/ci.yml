# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"] # You can add more versions like "3.11", "3.12"

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5 # Use v5 for setup-python
      with:
        python-version: ${{ matrix.python-version }}
        # Optional: cache dependencies managed by uv
        # cache: 'uv'
        # cache-dependency-path: pyproject.toml # Or requirements*.txt, setup.py etc.

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        # Add uv's install location to PATH for subsequent steps
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Create virtual environment and install dependencies
      run: |
        uv venv # Creates .venv by default
        # Install project and dev dependencies into the virtual environment
        # Assuming pre-commit, pytest, mkdocs are listed in pyproject.toml [project.optional-dependencies] dev
        uv pip install -e ".[dev]"

    - name: Run pre-commit checks
      # Use the official pre-commit action
      # It automatically uses the installed pre-commit if found,
      # otherwise installs it. It handles caching too.
      uses: pre-commit/action@v3.0.1 # Check for the latest version

    - name: Run tests with pytest
      run: |
        # Use 'uv run' to execute commands within the managed environment
        uv run python -m pytest --cov=src --cov-report=xml tests/

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
          token: ${{ secrets.CODECOV_TOKEN }}

  docs:
    # Ensure tests pass before deploying documentation
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Or match the version needed for docs
        # Optional: cache dependencies managed by uv
        # cache: 'uv'
        # cache-dependency-path: pyproject.toml

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Create virtual environment and install dependencies
      run: |
        uv venv
        uv pip install -e ".[docs]"

    # No need to run pre-commit again here, it ran in the 'test' job

    - name: Build documentation for deployment
      run: |
        # Assuming mkdocs.yml is in the root and site builds to ./site
        # Use 'uv run' to execute mkdocs from the virtual environment
        cd docs
        uv run mkdocs build

    #- name: Deploy to GitHub Pages
    #  uses: peaceiris/actions-gh-pages@v4 # Use v4 for gh-pages action
    #  with:
    #    github_token: ${{ secrets.GITHUB_TOKEN }}
        # Adjust publish_dir if your mkdocs build output is different
        # It should match the 'site_dir' in mkdocs.yml (defaults to 'site')
    #    publish_dir: ./site
        # If you used 'cd docs' above, the path would be relative to that:
        # publish_dir: ./docs/site
    - name: Upload artifact
        # Automatically uploads the built site files ('docs/site') for deployment
      uses: actions/upload-pages-artifact@v3
      with:
          # Path to the folder containing static files to upload.
          # This should match the output directory of 'mkdocs build' (relative to repo root)
        path: 'docs/site' # Default site_dir is 'site' relative to mkdocs.yml in 'docs/'

    # Job to deploy the documentation artifact to GitHub Pages
  deploy:
      # Only run this job on pushes to the main branch, after build completes
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      needs: docs
      permissions:
        id-token: write
        pages: write
      environment:
        name: github-pages
        url: ${{ steps.deployment.outputs.page_url }} # Output the deployed URL
      runs-on: ubuntu-latest
      steps:
        - name: Deploy to GitHub Pages
          id: deployment
          uses: actions/deploy-pages@v4 # Use the official deployment action
